import java.util.Comparator;
import java.util.Iterator;
import java.util.Objects;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Set;
import java.util.Map;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;

scrivere documentazione anche per i costruttori


For example, here is the preferred idiom for iterating over a collection (Item 58): 

// Preferred idiom for iterating over a collection or array 
for (Element e : elements) {
	 … // Do Something with e 
} 

If you need access to the iterator, perhaps to call its remove method, the preferred idiom uses a traditional for loop in place of the for-each loop: 
// Idiom for iterating when you need the iterator 
for (Iterator i = c.iterator(); i.hasNext(); ) { 
	Element e = i.next(); 
... // Do something with e and i 



esempio interfaccia

/**
 * Interfaccia che rappresenta un listino prezzi.
 *
 * <p>Il listino indica il prezzo di un certo numero di giocattoli di dato tipo e se è a conoscenza
 * del prezzo di un certo giocattolo.
 */
public interface Listino {   }
